1) Iterative Design
#include <iostream>
using namespace std;
int binarySearch(int array[], int x, int low, int high) {
while (low <= high) {
int mid = low + (high - low) / 2;
if (array[mid] == x)
return mid;
else if (array[mid] < x)
low = mid + 1;
else
high = mid - 1;
}
return -1;
}
int main(void) {
int array[] = {3, 4, 5, 6, 7, 8, 9};
int x = 5;
int n = sizeof(array) / sizeof(array[0]);
int result = binarySearch(array, x, 0, n - 1);
if (result == -1)
printf("Not found");
else
printf("Element is found at index: %d", result);
}
OUTPUT:
Element is found at index: 2
2) Recursive Design
#include <iostream>
using namespace std;
int binarySearch(int array[], int x, int low, int high) {
if (low<=high) {
int mid = (low+high) / 2;
if (array[mid] == x){
return mid;
}
else if (array[mid] > x){
return binarySearch(array, x, low, mid - 1);
}
else{
return binarySearch(array, x, mid + 1, high);
}
}
return -1;
}
int main(void) {
int array[] = {3, 4, 5, 6, 7, 8, 9};
int x = 5;
int n = sizeof(array) / sizeof(array[0]);
int result = binarySearch(array, x, 0, n - 1);
if (result == -1)
printf("Not found");
else
printf("Element is found at index: %d", result);
}